# -*- coding: utf-8 -*-
"""JSON Agent Query Interface.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QsGDgYubEyvSAvkMxXbwoYKLGiPHrKTd
"""

!pip install streamlit langchain-google-genai pyngrok langchain_community

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import json
# import streamlit as st
# from langchain_community.agent_toolkits.json.base import create_json_agent
# from langchain_community.agent_toolkits.json.toolkit import JsonToolkit
# from langchain_community.tools.json.tool import JsonSpec
# from langchain_google_genai import ChatGoogleGenerativeAI
# 
# # Load the model
# model = ChatGoogleGenerativeAI(model="gemini-1.5-flash", api_key="AIzaSyBGur_yrl5CRFnmk-szBoZ5YqjXEWRvrg8")
# 
# # Streamlit UI
# st.title("JSON Agent Query Interface")
# 
# # File uploader
# uploaded_file = st.file_uploader("Upload a JSON file", type="json")
# if uploaded_file is not None:
#     try:
#         # Load JSON data from the file
#         data = json.load(uploaded_file)
# 
#         # Debugging lines
#         st.write(f"Data type: {type(data)}")
#         st.write(f"Data content: {data}")
# 
#         # Convert list to dictionary if the data is a list
#         if isinstance(data, list):
#             # Convert list to a dictionary using the first item as the dictionary content
#             if len(data) > 0:
#                 data = data[0]
#             else:
#                 st.error("The JSON list is empty. Cannot process empty list.")
#                 data = {}
# 
#         # Check if data is a dictionary
#         if isinstance(data, dict):
#             # Create JSON spec and toolkit
#             spec = JsonSpec(dict_=data, max_value_length=500, keys_to_include=['data', 'data.USER_REQUEST'])
#             toolkit = JsonToolkit(spec=spec)
# 
#             # Create the JSON agent
#             agent = create_json_agent(
#                 llm=model,
#                 toolkit=toolkit,
#                 verbose=True,
#                 max_iterations=100,
#                 max_execution_time=60,
#                 handle_parsing_errors=True,
#                 input_variables=['data']
#             )
# 
#             # User input and response
#             user_prompt = st.text_input("Ask something:")
#             if user_prompt:
#                 if agent:
#                     try:
#                         response = agent.run(user_prompt)
#                         st.write(f"Response: {response}")
#                     except Exception as e:
#                         st.error(f"An error occurred while processing the query: {e}")
#                 else:
#                     st.warning("Agent not initialized. Please upload a valid JSON file.")
#         else:
#             st.error("Uploaded file content is not a valid dictionary.")
#     except json.JSONDecodeError as e:
#         st.error(f"Failed to decode JSON file: {e}")
#     except Exception as e:
#         st.error(f"An unexpected error occurred: {e}")
# else:
#     st.info("Please upload a JSON file to get started.")
#

!ngrok config add-authtoken 2lNKoo7rKrW6QNZDKZ4eaeeone4_4BDGz2ieJwDGxxBXYoj5Z

import subprocess
from pyngrok import ngrok

# Replace with your actual ngrok authtoken
ngrok.set_auth_token("2lNKoo7rKrW6QNZDKZ4eaeeone4_4BDGz2ieJwDGxxBXYoj5Z")

# Stop any existing ngrok tunnels
ngrok.kill()

# Start the Streamlit app and redirect output to a log file
log_file = 'streamlit_app.log'
with open(log_file, 'w') as f:
    subprocess.Popen(['streamlit', 'run', 'app.py'], stdout=f, stderr=f)

# Open a tunnel to the Streamlit app
public_url = ngrok.connect(8501, proto='http')
print(f"Streamlit app is running at {public_url}")

# Optionally, print out the log file content
with open(log_file, 'r') as f:
    print(f.read())